services:

  nginx:
    image: nginx:1.21.3
    restart: on-failure
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
    networks:
      - app-network
    depends_on:
      - users

  users:
    image: alexquesada/userservice:0.0.5
    restart: on-failure
    environment:
      - spring.datasource.url=jdbc:mysql://mysql-user:3306/users
      - spring.datasource.username=root
      - spring.datasource.password=password
      - spring.jpa.hibernate.ddl-auto=create-drop
      - BOOKS_HOST = books
      - BOOKS_PORT = 8080
    ports:
      - "8081:8081"
    depends_on:
      mysql-monolith:
        condition: service_healthy
    networks:
      - app-network

  books:
    image: alexquesada/bookservice:0.0.1
    restart: on-failure
    environment:
      - spring.datasource.url=jdbc:mysql://mysql-monolith:3306/books
      - spring.datasource.username=root
      - spring.datasource.password=password
      - spring.jpa.hibernate.ddl-auto=create-drop
    ports:
      - "8080:8080"
    depends_on:
      mysql-monolith:
        condition: service_healthy
    networks:
      - app-network

  mysql-user:
    image: mysql:8.0.32
    ports:
      - "3307:3306"
    environment:
      MYSQL_ROOT_PASSWORD: password
      MYSQL_DATABASE: users
      MYSQL_PASSWORD: password
      MYSQL_USER: user
    healthcheck:
      test: mysqladmin ping -h 127.0.0.1 -u root --password=$$MYSQL_PASSWORD
      interval: 5s
      timeout: 5s
      retries: 3
    networks:
      - app-network

  mysql-monolith:
    image: mysql:8.0.32
    ports:
      - "3306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: password
      MYSQL_DATABASE: books
      MYSQL_PASSWORD: password
      MYSQL_USER: user
    healthcheck:
      test: mysqladmin ping -h 127.0.0.1 -u root --password=$$MYSQL_PASSWORD
      interval: 5s
      timeout: 5s
      retries: 3
    networks:
      - app-network

networks:
  app-network:
    driver: bridge